kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: Jenkins-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: default

---

apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: kubectl-jenkins-context
data:
  kubectl-config-context.sh: |-
    #!/bin/bash -v

    kubectl config set-credentials jenkins --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    kubectl config set-cluster gke_test-project-225004_asia-east1-a_belajar-ci --server="https://35.194.173.197" --certificate-authority="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    kubectl config set-context jenkins-belajar-ci --cluster=gke_test-project-225004_asia-east1-a_belajar-ci --user=jenkins
    kubectl config use-context jenkins-belajar-ci
    chmod 755 ~/.kube/config

# kubectl config set-cluster belajar-ci --server="35.194.173.197"
# kubectl config set-cluster belajar-ci --server="130.211.241.249" 
  # old run from local
  # kubectl-config-context.sh: |-
  #   #!/bin/bash -v

  #   kubectl config set-credentials jenkins --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
  #   kubectl config set-cluster minikube --server="https://192.168.99.100:8443" --certificate-authority="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  #   kubectl config set-context jenkins-minikube --cluster=minikube --user=jenkins --namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
  #   kubectl config use-context jenkins-minikube
  #   chmod 755 ~/.kube/config
---

apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: jenkins
    tier: jenkins
  type: LoadBalancer
  # type: NodePort #using this from local

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jenkins
        tier: jenkins
    spec:
      serviceAccountName: jenkins
      initContainers:
      - image: lachlanevenson/k8s-kubectl:v1.11.2
        name: kubectl-config
        command:
        - "/bin/sh"
        args:
        - "/kubectl-config-context.sh"
        volumeMounts:
        - name: kubeconfig
          mountPath: "/root/.kube"
        - name: kubectl-jenkins-context
          mountPath: "/kubectl-config-context.sh"
          subPath: "kubectl-config-context.sh"
      containers:
      - image: zokypesch/my-jenkins:latest
        name: jenkins
        securityContext:
          privileged: true
        volumeMounts:
        - name: kubeconfig
          mountPath: /var/jenkins_home/.kube
        - name: docker
          mountPath: /var/run/docker.sock
          #harus di pikirin nih !!
        # - name: jenkins-persistent-storage
        #   mountPath: /var/jenkins_home
        ports:
        - containerPort: 8080
          name: jenkins
      volumes:
      - name: kubectl-jenkins-context
        configMap:
          name: kubectl-jenkins-context
          items:
          - key: kubectl-config-context.sh
            path: kubectl-config-context.sh
      - name: kubeconfig
        emptyDir: {}
      - name: docker
        hostPath:
          path: /var/run/docker.sock
      - name: jenkins-persistent-storage
        persistentVolumeClaim:
          claimName: jenkins-claim